---
description: 
globs: 
alwaysApply: true
---
- Idioma: siempre Español en documentación, comentarios y respuestas.
- Entorno virtual: uso de `venv`; instrucciones para crear y activar el entorno.
- Dependencias: gestión con `requirements.txt` (versiones fijas), uso de `python-dotenv` y plantilla `.env.example`.
- Documentación: `README.md` con título, badges, tabla de contenidos y secciones estándar (Descripción, Características, Arquitectura/Estructura, Instalación, Configuración, Uso, Pruebas, Roadmap, Contribución), emojis y ejemplos en bloques de código.
- Roadmap: generar `ROADMAP.md` con fases numeradas, listas de verificación Markdown y emojis.
- Pruebas: estructura `tests/unit/` y `tests/integration/` con ejemplos de tests usando `pytest`.
- Formato: uso de Black para formateo automático, Flake8 para lint, cumplimiento de PEP 8 y uso de *type hints*.
- Logging y manejo de errores: módulo `logging` configurado para volcar JSON en `logs/` y uso de bloques `try/except` con logs de error.
- CI/CD: pipeline básico que ejecute `pytest` y `flake8` en cada commit.
- Flujo de trabajo: seguir las tareas definidas en `ROADMAP.md`; al finalizar los cambios ejecutar pruebas con `pytest`; si todas pasan, actualizar la checklist en `ROADMAP.md` marcando la tarea correspondiente como completada (`[x]`), luego usar `git add .`, `git commit -m "<mensaje descriptivo>"` y `git push` al repositorio actual.
- Estructura de carpetas: usar `src/` para código fuente, `tests/` para pruebas (unitarias y de integración), `config/` para archivos de configuración, `logs/` para registros de ejecución.
- Herramientas de configuración: incluir archivos de configuración de linting (`.flake8`), formateo (`pyproject.toml` o `setup.cfg` para Black), y testing (`pytest.ini` o `tox.ini`).
- Empaquetado y CLI: disponer de `setup.py` o `pyproject.toml` con entry_points para exponer scripts CLI; soportar `--help` y carga de `__main__.py`.
- Gestión de versiones y licencias: incluir `LICENSE` (preferiblemente MIT) y `CHANGELOG.md` documentando versiones y cambios.
- Docstrings: documentar módulos, clases y funciones con triple comillas siguiendo un estilo (Google o NumPy) y anotar parámetros y retornos.
- Scripts de automatización: usar `Makefile` o directorio `scripts/` con comandos recurrentes (`make install`, `make lint`, `make test`, `make format`).







