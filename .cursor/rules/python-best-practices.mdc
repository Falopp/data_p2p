---
description: 
globs: 
alwaysApply: true
---
- Utiliza un entorno virtual con `venv` para gestionar dependencias.
- Fija las versiones de las dependencias en `requirements.txt`.
- Usa `python-dotenv` para gestionar variables de entorno y proporciona un archivo `.env.example`.
- Documenta el proyecto en `README.md` con secciones estándar y ejemplos de uso.
- Genera un `ROADMAP.md` con fases y listas de verificación en Markdown.
- Estructura las pruebas en `tests/unit/` y `tests/integration/` utilizando `pytest`.
- Aplica `Black` para formateo automático y `Flake8` para linting, siguiendo PEP 8.
- Configura el módulo `logging` para registrar errores en formato JSON en `logs/`.
- Implementa un pipeline CI/CD que ejecute `pytest` y `flake8` en cada commit.
- Sigue el flujo de trabajo definido en `ROADMAP.md` para gestionar tareas y commits.
- Organiza el código en `src/`, las pruebas en `tests/`, y los registros en `logs/`.
- Incluye archivos de configuración para linting y formateo en el proyecto.
- Proporciona un `setup.py` o `pyproject.toml` para empaquetado y scripts CLI.
- Incluye un archivo `LICENSE` y un `CHANGELOG.md` para gestionar versiones.
- Documenta el código con docstrings siguiendo un estilo consistente (Google o NumPy).
- Usa un `Makefile` o un directorio `scripts/` para automatizar comandos recurrentes.

